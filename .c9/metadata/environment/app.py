{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":279,"column":70},"end":{"row":280,"column":8},"action":"remove","lines":["","        "],"id":3347}],[{"start":{"row":273,"column":106},"end":{"row":273,"column":107},"action":"remove","lines":[")"],"id":3349},{"start":{"row":273,"column":106},"end":{"row":274,"column":0},"action":"insert","lines":["",""]},{"start":{"row":274,"column":0},"end":{"row":274,"column":8},"action":"insert","lines":["        "]},{"start":{"row":274,"column":8},"end":{"row":275,"column":0},"action":"insert","lines":["",""]},{"start":{"row":275,"column":0},"end":{"row":275,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":275,"column":8},"end":{"row":279,"column":9},"action":"insert","lines":["print(results)","    print(\"\")","    print(criteria)","    for r in results:","\tprint(r)"],"id":3350}],[{"start":{"row":275,"column":4},"end":{"row":275,"column":8},"action":"remove","lines":["    "],"id":3351},{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"remove","lines":["    "]},{"start":{"row":274,"column":8},"end":{"row":275,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":274,"column":4},"end":{"row":274,"column":8},"action":"remove","lines":["    "],"id":3352},{"start":{"row":274,"column":0},"end":{"row":274,"column":4},"action":"remove","lines":["    "]},{"start":{"row":273,"column":106},"end":{"row":274,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":273,"column":106},"end":{"row":274,"column":0},"action":"insert","lines":["",""],"id":3353},{"start":{"row":274,"column":0},"end":{"row":274,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"remove","lines":["    "],"id":3354},{"start":{"row":274,"column":22},"end":{"row":275,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":274,"column":22},"end":{"row":275,"column":0},"action":"insert","lines":["",""],"id":3355},{"start":{"row":275,"column":0},"end":{"row":275,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":276,"column":0},"end":{"row":276,"column":4},"action":"remove","lines":["    "],"id":3356},{"start":{"row":275,"column":17},"end":{"row":276,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":275,"column":17},"end":{"row":276,"column":0},"action":"insert","lines":["",""],"id":3357},{"start":{"row":276,"column":0},"end":{"row":276,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":277,"column":0},"end":{"row":277,"column":4},"action":"remove","lines":["    "],"id":3358},{"start":{"row":276,"column":23},"end":{"row":277,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":276,"column":23},"end":{"row":277,"column":0},"action":"insert","lines":["",""],"id":3359},{"start":{"row":277,"column":0},"end":{"row":277,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":278,"column":0},"end":{"row":278,"column":1},"action":"remove","lines":["\t"],"id":3360},{"start":{"row":277,"column":25},"end":{"row":278,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":277,"column":25},"end":{"row":278,"column":0},"action":"insert","lines":["",""],"id":3361},{"start":{"row":278,"column":0},"end":{"row":278,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":234,"column":0},"end":{"row":291,"column":66},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","","        results = recipes.find({'$and': [{'recipe_origin': u'Japanese'}, {'recipe_difficulty': u'Hard'}] }","        print(results)","        print(\"\")","        print(criteria)","        for r in results:","            print(r)","        ","        return render_template(\"filter_recipe.html\", results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3362}],[{"start":{"row":234,"column":0},"end":{"row":292,"column":66},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    results = recipes.find({'$and': [{‘recipe_origin’: u’Japanese’}, {‘recipe_difficulty’: u’Hard’}] })","    print(results)","    print(\"\")","    print(criteria)","    for r in results:","\tprint(r)","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3363}],[{"start":{"row":279,"column":56},"end":{"row":279,"column":57},"action":"remove","lines":["’"],"id":3364}],[{"start":{"row":279,"column":56},"end":{"row":279,"column":57},"action":"insert","lines":["'"],"id":3365}],[{"start":{"row":279,"column":65},"end":{"row":279,"column":66},"action":"remove","lines":["’"],"id":3366}],[{"start":{"row":279,"column":65},"end":{"row":279,"column":66},"action":"insert","lines":["'"],"id":3367}],[{"start":{"row":279,"column":70},"end":{"row":279,"column":71},"action":"remove","lines":["‘"],"id":3368}],[{"start":{"row":279,"column":70},"end":{"row":279,"column":71},"action":"insert","lines":["'"],"id":3369}],[{"start":{"row":279,"column":88},"end":{"row":279,"column":89},"action":"remove","lines":["’"],"id":3370}],[{"start":{"row":279,"column":88},"end":{"row":279,"column":89},"action":"insert","lines":["'"],"id":3371}],[{"start":{"row":279,"column":92},"end":{"row":279,"column":93},"action":"remove","lines":["’"],"id":3372}],[{"start":{"row":279,"column":92},"end":{"row":279,"column":93},"action":"insert","lines":["'"],"id":3373}],[{"start":{"row":279,"column":97},"end":{"row":279,"column":98},"action":"remove","lines":["’"],"id":3374}],[{"start":{"row":279,"column":97},"end":{"row":279,"column":98},"action":"insert","lines":["'"],"id":3375}],[{"start":{"row":279,"column":52},"end":{"row":279,"column":53},"action":"remove","lines":["’"],"id":3376}],[{"start":{"row":279,"column":52},"end":{"row":279,"column":53},"action":"insert","lines":["'"],"id":3377}],[{"start":{"row":279,"column":38},"end":{"row":279,"column":39},"action":"remove","lines":["‘"],"id":3378}],[{"start":{"row":279,"column":38},"end":{"row":279,"column":39},"action":"insert","lines":["'"],"id":3379}],[{"start":{"row":234,"column":0},"end":{"row":292,"column":66},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    results = recipes.find({'$and': [{'recipe_origin': u'Japanese'}, {'recipe_difficulty': u'Hard'}] })","    print(results)","    print(\"\")","    print(criteria)","    for r in results:","\tprint(r)","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3380}],[{"start":{"row":234,"column":0},"end":{"row":290,"column":66},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","​","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = results.count()","        print(count)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","​","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3381}],[{"start":{"row":280,"column":0},"end":{"row":280,"column":1},"action":"remove","lines":["​"],"id":3382},{"start":{"row":279,"column":70},"end":{"row":280,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":234,"column":0},"end":{"row":289,"column":66},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","​","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = results.count()","        print(count)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3384}],[{"start":{"row":234,"column":0},"end":{"row":290,"column":66},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = results.count()","        print(count)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3385}],[{"start":{"row":284,"column":4},"end":{"row":285,"column":4},"action":"remove","lines":["","    "],"id":3386},{"start":{"row":284,"column":0},"end":{"row":284,"column":4},"action":"remove","lines":["    "]},{"start":{"row":283,"column":8},"end":{"row":284,"column":0},"action":"remove","lines":["",""]},{"start":{"row":283,"column":4},"end":{"row":283,"column":8},"action":"remove","lines":["    "]},{"start":{"row":283,"column":0},"end":{"row":283,"column":4},"action":"remove","lines":["    "]},{"start":{"row":282,"column":0},"end":{"row":283,"column":0},"action":"remove","lines":["",""]},{"start":{"row":281,"column":4},"end":{"row":282,"column":0},"action":"remove","lines":["",""]},{"start":{"row":281,"column":0},"end":{"row":281,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":280,"column":0},"end":{"row":281,"column":0},"action":"remove","lines":["",""],"id":3387}],[{"start":{"row":234,"column":0},"end":{"row":285,"column":66},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = results.count()","        print(count)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3388}],[{"start":{"row":234,"column":0},"end":{"row":291,"column":66},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = results.count()","        print(count)","        print(criteria)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3389}],[{"start":{"row":234,"column":0},"end":{"row":291,"column":66},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = results.count()","        print(count)","        print(criteria)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3390}],[{"start":{"row":234,"column":0},"end":{"row":293,"column":66},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = recipes.find({'$and': criteria }).count()","        print(count)","        print(criteria)","        for r in result:","            print(r)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3391}],[{"start":{"row":276,"column":23},"end":{"row":276,"column":24},"action":"insert","lines":["s"],"id":3392}],[{"start":{"row":234,"column":0},"end":{"row":293,"column":66},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = recipes.find({'$and': criteria }).count()","        print(count)","        print(criteria)","        for r in results:","            print(r)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3393}],[{"start":{"row":234,"column":0},"end":{"row":293,"column":66},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = recipes.find({'$and': criteria }).count()","        print(count)","        print(criteria)","        for r in result:","            print(r)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3394}],[{"start":{"row":276,"column":23},"end":{"row":276,"column":24},"action":"insert","lines":["s"],"id":3395}],[{"start":{"row":234,"column":0},"end":{"row":293,"column":66},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': criteria })","        count = recipes.find({'$and': criteria }).count()","        print(count)","        print(criteria)","        for r in results:","            print(r)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())","","    ","","        ","    ","    ","    return render_template(\"filter_recipe.html\",","                            origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find())"],"id":3396}],[{"start":{"row":234,"column":0},"end":{"row":282,"column":70},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': [{‘recipe_origins’: u’Japanese’}, {‘recipe_difficulty’: u’Hard’}] })","        count = results.count","        print(count)","        print(criteria)","        for r in result:","            print(r)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())"],"id":3397}],[{"start":{"row":276,"column":23},"end":{"row":276,"column":24},"action":"insert","lines":["s"],"id":3398}],[{"start":{"row":272,"column":42},"end":{"row":272,"column":43},"action":"remove","lines":["‘"],"id":3399}],[{"start":{"row":272,"column":42},"end":{"row":272,"column":43},"action":"insert","lines":["'"],"id":3400}],[{"start":{"row":272,"column":57},"end":{"row":272,"column":58},"action":"remove","lines":["’"],"id":3401}],[{"start":{"row":272,"column":57},"end":{"row":272,"column":58},"action":"insert","lines":["'"],"id":3402}],[{"start":{"row":272,"column":62},"end":{"row":272,"column":63},"action":"insert","lines":["'"],"id":3403}],[{"start":{"row":272,"column":62},"end":{"row":272,"column":63},"action":"remove","lines":["'"],"id":3404},{"start":{"row":272,"column":61},"end":{"row":272,"column":62},"action":"remove","lines":["’"]}],[{"start":{"row":272,"column":61},"end":{"row":272,"column":62},"action":"insert","lines":["'"],"id":3405}],[{"start":{"row":272,"column":70},"end":{"row":272,"column":71},"action":"remove","lines":["’"],"id":3406}],[{"start":{"row":272,"column":70},"end":{"row":272,"column":71},"action":"insert","lines":["'"],"id":3407}],[{"start":{"row":272,"column":75},"end":{"row":272,"column":76},"action":"remove","lines":["‘"],"id":3408}],[{"start":{"row":272,"column":75},"end":{"row":272,"column":76},"action":"insert","lines":["'"],"id":3409}],[{"start":{"row":272,"column":93},"end":{"row":272,"column":94},"action":"remove","lines":["’"],"id":3410}],[{"start":{"row":272,"column":93},"end":{"row":272,"column":94},"action":"insert","lines":["'"],"id":3411}],[{"start":{"row":272,"column":97},"end":{"row":272,"column":98},"action":"remove","lines":["’"],"id":3412}],[{"start":{"row":272,"column":97},"end":{"row":272,"column":98},"action":"insert","lines":["'"],"id":3413}],[{"start":{"row":272,"column":102},"end":{"row":272,"column":103},"action":"remove","lines":["’"],"id":3414}],[{"start":{"row":272,"column":102},"end":{"row":272,"column":103},"action":"insert","lines":["'"],"id":3415}],[{"start":{"row":234,"column":0},"end":{"row":282,"column":70},"action":"remove","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origins': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        results = recipes.find({'$and': [{'recipe_origins': u'Japanese'}, {'recipe_difficulty': u'Hard'}] })","        count = results.count","        print(count)","        print(criteria)","        for r in results:","            print(r)","        return render_template(\"filter_recipe.html\", #results=results,","                                origins=mongo.db.origins.find(),","                                time=mongo.db.time.find(),","                                serving=mongo.db.serving.find(),","                                difficulty=mongo.db.difficulty.find())"],"id":3416}],[{"start":{"row":234,"column":0},"end":{"row":276,"column":49},"action":"insert","lines":["@app.route(\"/filter_recipe\", methods=[\"GET\", \"POST\"])","def filter_recipe():","    \"\"\"","    Filter by difficulty level, origin, time, and serving","    \"\"\"","    ","    recipes = mongo.db.recipes # Set our collection","    criteria = [] # An array for use in the mongo query","    ","    if request.method == \"POST\":","        origins = request.form.get('recipe_origin')","        if origins is not None:","            dict1 = {","                    'recipe_origin': origins","                    }","            criteria.append(dict1)","    ","        #time = request.form.get('recipe_time')","        #if time is not None:","            #dict2 = {","                    #'recipe_time': time","                    #}","            #criteria.append(dict2)","    ","        difficulty = request.form.get('recipe_difficulty')","        if difficulty is not None:","            dict3 = {","                    'recipe_difficulty': difficulty","                }","            criteria.append(dict3)","            ","        #serving = request.form.get('recipe_serving')","        #if serving is not None:","            #dict4 = {","                    #'recipe_serving' : serving","                #}","            #criteria.append(dict4)","        ","        results = recipes.find({'$and': criteria })","","        return render_template(\"filter_recipe.html\", results=results)","    ","    return render_template(\"filter_recipe.html\",)"],"id":3417}],[{"start":{"row":274,"column":68},"end":{"row":274,"column":69},"action":"insert","lines":[","],"id":3418}],[{"start":{"row":274,"column":69},"end":{"row":275,"column":0},"action":"insert","lines":["",""],"id":3419},{"start":{"row":275,"column":0},"end":{"row":275,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":275,"column":8},"end":{"row":275,"column":12},"action":"insert","lines":["    "],"id":3420}],[{"start":{"row":275,"column":12},"end":{"row":275,"column":16},"action":"insert","lines":["    "],"id":3421}],[{"start":{"row":275,"column":16},"end":{"row":275,"column":20},"action":"insert","lines":["    "],"id":3422}],[{"start":{"row":275,"column":20},"end":{"row":275,"column":24},"action":"insert","lines":["    "],"id":3423}],[{"start":{"row":275,"column":24},"end":{"row":275,"column":28},"action":"insert","lines":["    "],"id":3424}],[{"start":{"row":275,"column":28},"end":{"row":275,"column":32},"action":"insert","lines":["    "],"id":3425}],[{"start":{"row":275,"column":32},"end":{"row":278,"column":65},"action":"insert","lines":["origins=mongo.db.origins.find(),","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),","                            difficulty=mongo.db.difficulty.find()"],"id":3426}],[{"start":{"row":275,"column":28},"end":{"row":275,"column":32},"action":"remove","lines":["    "],"id":3427}],[{"start":{"row":275,"column":60},"end":{"row":277,"column":60},"action":"remove","lines":["","                            time=mongo.db.time.find(),","                            serving=mongo.db.serving.find(),"],"id":3444}],[{"start":{"row":275,"column":28},"end":{"row":276,"column":65},"action":"remove","lines":["origins=mongo.db.origins.find(),","                            difficulty=mongo.db.difficulty.find()"],"id":3445}],[{"start":{"row":275,"column":24},"end":{"row":275,"column":28},"action":"remove","lines":["    "],"id":3446},{"start":{"row":275,"column":20},"end":{"row":275,"column":24},"action":"remove","lines":["    "]},{"start":{"row":275,"column":16},"end":{"row":275,"column":20},"action":"remove","lines":["    "]},{"start":{"row":275,"column":12},"end":{"row":275,"column":16},"action":"remove","lines":["    "]},{"start":{"row":275,"column":8},"end":{"row":275,"column":12},"action":"remove","lines":["    "]},{"start":{"row":275,"column":4},"end":{"row":275,"column":8},"action":"remove","lines":["    "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"remove","lines":["    "]},{"start":{"row":274,"column":69},"end":{"row":275,"column":0},"action":"remove","lines":["",""]},{"start":{"row":274,"column":68},"end":{"row":274,"column":69},"action":"remove","lines":[","]}],[{"start":{"row":276,"column":48},"end":{"row":277,"column":0},"action":"insert","lines":["",""],"id":3447},{"start":{"row":277,"column":0},"end":{"row":277,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":277,"column":4},"end":{"row":277,"column":8},"action":"insert","lines":["    "],"id":3448}],[{"start":{"row":277,"column":8},"end":{"row":277,"column":12},"action":"insert","lines":["    "],"id":3449}],[{"start":{"row":277,"column":12},"end":{"row":277,"column":16},"action":"insert","lines":["    "],"id":3450}],[{"start":{"row":277,"column":16},"end":{"row":277,"column":20},"action":"insert","lines":["    "],"id":3451}],[{"start":{"row":277,"column":20},"end":{"row":277,"column":24},"action":"insert","lines":["    "],"id":3452}],[{"start":{"row":277,"column":24},"end":{"row":277,"column":28},"action":"insert","lines":["    "],"id":3453}],[{"start":{"row":277,"column":24},"end":{"row":277,"column":28},"action":"remove","lines":["    "],"id":3454}],[{"start":{"row":277,"column":24},"end":{"row":278,"column":65},"action":"insert","lines":["origins=mongo.db.origins.find(),","                            difficulty=mongo.db.difficulty.find()"],"id":3455}],[{"start":{"row":278,"column":24},"end":{"row":278,"column":28},"action":"remove","lines":["    "],"id":3456}],[{"start":{"row":278,"column":62},"end":{"row":279,"column":0},"action":"insert","lines":["",""],"id":3457},{"start":{"row":279,"column":0},"end":{"row":279,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":279,"column":20},"end":{"row":279,"column":24},"action":"remove","lines":["    "],"id":3458},{"start":{"row":279,"column":16},"end":{"row":279,"column":20},"action":"remove","lines":["    "]},{"start":{"row":279,"column":12},"end":{"row":279,"column":16},"action":"remove","lines":["    "]},{"start":{"row":279,"column":8},"end":{"row":279,"column":12},"action":"remove","lines":["    "]},{"start":{"row":279,"column":4},"end":{"row":279,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":279,"column":4},"end":{"row":280,"column":0},"action":"insert","lines":["",""],"id":3459},{"start":{"row":280,"column":0},"end":{"row":280,"column":4},"action":"insert","lines":["    "]},{"start":{"row":280,"column":4},"end":{"row":280,"column":5},"action":"insert","lines":["p"]},{"start":{"row":280,"column":5},"end":{"row":280,"column":6},"action":"insert","lines":["r"]},{"start":{"row":280,"column":6},"end":{"row":280,"column":7},"action":"insert","lines":["i"]},{"start":{"row":280,"column":7},"end":{"row":280,"column":8},"action":"insert","lines":["n"]},{"start":{"row":280,"column":8},"end":{"row":280,"column":9},"action":"insert","lines":["t"]}],[{"start":{"row":280,"column":9},"end":{"row":280,"column":11},"action":"insert","lines":["()"],"id":3460}],[{"start":{"row":280,"column":10},"end":{"row":280,"column":11},"action":"insert","lines":["c"],"id":3461},{"start":{"row":280,"column":11},"end":{"row":280,"column":12},"action":"insert","lines":["r"]},{"start":{"row":280,"column":12},"end":{"row":280,"column":13},"action":"insert","lines":["i"]},{"start":{"row":280,"column":13},"end":{"row":280,"column":14},"action":"insert","lines":["t"]},{"start":{"row":280,"column":14},"end":{"row":280,"column":15},"action":"insert","lines":["e"]},{"start":{"row":280,"column":15},"end":{"row":280,"column":16},"action":"insert","lines":["r"]},{"start":{"row":280,"column":16},"end":{"row":280,"column":17},"action":"insert","lines":["i"]},{"start":{"row":280,"column":17},"end":{"row":280,"column":18},"action":"insert","lines":["a"]}],[{"start":{"row":280,"column":4},"end":{"row":280,"column":19},"action":"remove","lines":["print(criteria)"],"id":3462}],[{"start":{"row":280,"column":0},"end":{"row":280,"column":4},"action":"remove","lines":["    "],"id":3463},{"start":{"row":279,"column":4},"end":{"row":280,"column":0},"action":"remove","lines":["",""]},{"start":{"row":279,"column":0},"end":{"row":279,"column":4},"action":"remove","lines":["    "]},{"start":{"row":278,"column":62},"end":{"row":279,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":274,"column":69},"end":{"row":275,"column":0},"action":"insert","lines":["",""],"id":3464},{"start":{"row":275,"column":0},"end":{"row":275,"column":8},"action":"insert","lines":["        "]},{"start":{"row":275,"column":8},"end":{"row":276,"column":0},"action":"insert","lines":["",""]},{"start":{"row":276,"column":0},"end":{"row":276,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":276,"column":8},"end":{"row":276,"column":23},"action":"insert","lines":["print(criteria)"],"id":3465}]]},"ace":{"folds":[],"scrolltop":3986.5,"scrollleft":0,"selection":{"start":{"row":245,"column":24},"end":{"row":245,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":26,"state":"start","mode":"ace/mode/python"}},"timestamp":1565954103843,"hash":"18d83e62c913f0a88bcdfb5376394b2f1db9af61"}